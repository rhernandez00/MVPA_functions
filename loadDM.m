function [data] = loadDM(csvFile)
% clear all
% csvFile = 'DMtest';
getDropboxFolder;
pathI = [dropboxFolder,'\IPython Notebooks\PyMVPA\'];
pathI = ['C:\Users\Hallgato\Google Drive\Complex\DSM\'];
% disp(pathI)
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Raul\Dropbox\IPython Notebooks\PyMVPA\DMtest.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/29 18:06:03

%% Initialize variables.
filename =[pathI, csvFile, '.csv'];

delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column6: text (%q)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%*q%*q%*q%*q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
DMvals = [dataArray{1:end-1}];
%DMvals = DMvals
%DMvals = DMvals(2:end-1);
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Raul\Dropbox\IPython Notebooks\PyMVPA\DMtest.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/08/29 18:05:32

%% Initialize variables.
filename =[pathI, csvFile, '.csv'];
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%*q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.
rawData = dataArray{3};
for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, 3) = numbers{1};
            raw{row, 3} = numbers{1};
        end
    catch me
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, 3);
rawCellColumns = raw(:, [1,2]);


%% Allocate imported array to column variable names
Mask = rawCellColumns(:, 1);
MaskType = rawCellColumns(:, 2);
Subject = cell2mat(rawNumericColumns(:, 1));


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Raul\Dropbox\IPython Notebooks\PyMVPA\10catMasksFixAlphaRSA.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/09/01 17:20:28

%% Initialize variables.
filename =[pathI, csvFile, '.csv'];
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column7: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%*q%*q%*q%*q%*q%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
alphaANOVA = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;


%%
data = [];
for i = 1:length(DMvals)
    data(i).mask = Mask(i);
    data(i).type = MaskType(i);
    data(i).subject = Subject(i);
    data(i).alpha = alphaANOVA(i);
    %vals = DMvals(i);
    vals = DMvals{i};
    vals = strrep(vals,'[','');
    vals = strrep(vals,']','');
    vals = strsplit(vals,',');
    for k = 1:length(vals)
        valsM(k) = str2num(vals{k});
    end
    data(i).DMvals = valsM;
end


